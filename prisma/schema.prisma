generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum DailyGoal {
  FIVE_MIN
  TEN_MIN
  FIFTEEN_MIN
  TWENTY_MIN
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
  TRUE_FALSE
}

model User {
  id                String     @id @default(cuid())
  clerkId           String     @unique
  activeModuleId    String?
  activeModule      Module?    @relation(fields: [activeModuleId], references: [id])
  activeQuestionId  String?    
  activeQuestion    Question?  @relation(fields: [activeQuestionId], references: [id])
  dailyGoal         DailyGoal?
  onboardingOptions Json?
  submissions       Submission[]
  level             Int        @default(0)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Module {
  id          String     @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User[]
  Question    Question[]
}

model Question {
  id                   String              @id @default(cuid())
  title                String
  type                 QuestionType        @default(SINGLE_CHOICE)
  options              Option[]
  correctBooleanAnswer Boolean?
  correctTextAnswers   CorrectTextAnswer[]
  moduleId             String
  module               Module              @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  Submission           Submission[]
  explanation          Explanation?
  User                User[]
}

model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CorrectTextAnswer {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Submission {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId        String
  question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrect         Boolean
  submittedAnswer   Json?
  durationInSeconds Int
  submittedAt       DateTime @default(now())
}

model Explanation {
  id          String   @id @default(cuid())
  content     String
  questionId  String   @unique // Une explication par question
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}